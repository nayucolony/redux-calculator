{"version":3,"sources":["serviceWorker.js","actions/index.js","utils/actionTypes.js","CalculatorContainer.js","reducers/calculator.js","reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","onNumClick","number","type","onPlusClick","NumBtn","props","n","onClick","react_default","a","createElement","PlusBtn","Result","result","enhance","compose","connect","state","ownProps","calculator","dispatch","actions","bindActionCreators","withProps","CalculatorContainer_NumBtn","CalculatorContainer_PlusBtn","CalculatorContainer_Result","showingResult","resultValue","inputValue","initialAppState","arguments","length","undefined","action","Object","objectSpread","reducer","combineReducers","store","createStore","ReactDOM","render","es","src_CalculatorContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83bd3fec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../utils/actionTypes';\n\nexport const onNumClick = (number) => ({\n    type: actionTypes.INPUT_NUMBER,\n    number,\n});\n\nexport const onPlusClick = () => ({\n    type: actionTypes.PLUS,\n});","export const INPUT_NUMBER = 'INPUT_NUMBER';\nexport const PLUS = 'PLUS';","import React from 'react'\nimport { connect } from 'react-redux'\nimport { compose, withProps } from 'recompose'\nimport { bindActionCreators } from 'redux'\nimport * as actions from './actions'\nconst NumBtn = props => {\n  const { n, onClick } = props\n  return <button onClick={onClick}>{n}</button>\n}\n\nconst PlusBtn = props => {\n  const { onClick } = props\n  return <button onClick={onClick}>+</button>\n}\n\nconst Result = props => {\n  const { result } = props\n  return (\n    <div>\n      Result: <span>{result}</span>\n    </div>\n  )\n}\n\nconst CalculatorContainer = props => {\n  const { actions, calculator } = props\n  return (\n    <div>\n      <div>\n        <NumBtn n={1} onClick={() => actions.onNumClick(1)} />\n        <NumBtn n={2} onClick={() => actions.onNumClick(2)} />\n        <NumBtn n={3} onClick={() => actions.onNumClick(3)} />\n      </div>\n      <div>\n        <NumBtn n={4} onClick={() => actions.onNumClick(4)} />\n        <NumBtn n={5} onClick={() => actions.onNumClick(5)} />\n        <NumBtn n={6} onClick={() => actions.onNumClick(6)} />\n      </div>\n      <div>\n        <NumBtn n={7} onClick={() => actions.onNumClick(7)} />\n        <NumBtn n={8} onClick={() => actions.onNumClick(8)} />\n        <NumBtn n={9} onClick={() => actions.onNumClick(9)} />\n      </div>\n      <div>\n        <NumBtn n={0} onClick={() => actions.onNumClick(0)} />\n        <PlusBtn onClick={actions.onPlusClick} />\n      </div>\n      <Result result={calculator.showingResult ? calculator.resultValue : calculator.inputValue} />\n    </div>\n  )\n}\n\nconst mapState = (state, ownProps) => {\n  return {\n    calculator: state.calculator\n  }\n}\n\nfunction mapDispatch(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  }\n}\n\nconst enhance = compose(\n  connect(\n    mapState,\n    mapDispatch\n  ),\n  withProps(props => props)\n)\n\nexport default enhance(CalculatorContainer)\n","import * as actionTypes from \"../utils/actionTypes\"\n\nconst initialAppState = {\n    inputValue: 0,\n    resultValue: 0,\n    showingResult: false\n}\n\nconst calculator = (state = initialAppState, action) => {\n    if (action.type === actionTypes.INPUT_NUMBER) {\n        return {\n            ...state,\n            inputValue: state.inputValue * 10 + action.number,\n            showingResult: false\n        }\n    } else if (action.type === actionTypes.PLUS) {\n        return {\n            ...state,\n            inputValue: 0,\n            resultValue: state.resultValue + state.inputValue,\n            showingResult: true\n        }\n    } else {\n        return state;\n    }\n}\n\nexport default calculator;","import { combineReducers } from 'redux'\nimport calculator from './calculator'\n\nconst reducer = combineReducers({\n  calculator\n})\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport CalculatorContainer from './CalculatorContainer'\nimport reducer from './reducers'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <CalculatorContainer />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}